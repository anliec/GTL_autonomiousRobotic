#! /usr/bin/env python
# Task Long configuration

PACKAGE='task_manager_action'
import roslib; roslib.load_manifest(PACKAGE)
import math

from dynamic_reconfigure.parameter_generator import *
from task_manager_lib.parameter_generator import *

gen = TaskParameterGenerator()
#       Name                    Type            Description
#       Default    Min   Max
gen.add("goal_x",        double_t, 0,    "X coordinate of destination (m)",  0.)
gen.add("goal_y",        double_t, 0,    "Y coordinate of destination (m)",  0.)
gen.add("goal_z",        double_t, 0,    "Z coordinate of destination (m)",  0.)
gen.add("goal_roll",     double_t, 0,    "Roll at destination (rad)",  0., -math.pi, math.pi)
gen.add("goal_pitch",    double_t, 0,    "Pitch at destination (rad)",  0., -math.pi, math.pi)
gen.add("goal_yaw",      double_t, 0,    "Yaw/Heading at destination (rad)",  0., -math.pi, math.pi)
gen.add("topic_name",   str_t, 0,    "Name of the action server", "/move_base_simple/goal")
gen.add("base_link",      str_t, 0,    "Name of the robot frame", "base_link")
gen.add("reference_frame",      str_t, 0,    "Name of the reference frame", "map")
gen.add("resend_goal",      bool_t, 0,    "True if the task needs to resend the goal until completion", False)
gen.add("wait_completion",      bool_t, 0,    "True if the task needs to wait for the goal to be reached", False)
gen.add("dist_threshold",      double_t, 0,    "Distance threshold when testing completion (m)",  1., 0. )
gen.add("angle_threshold",      double_t, 0,    "Angular threshold when testing completion (rad)",  0.1, -math.pi, math.pi)

exit(gen.generate(PACKAGE, "task_manager_action", "TaskActionMoveGoal"))

